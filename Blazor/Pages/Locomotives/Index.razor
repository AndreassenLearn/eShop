@page "/locomotives"
@using ServiceLayer.LocomotiveService
@using Microsoft.AspNetCore.WebUtilities
@using System.Web
@using System.Collections.Specialized
@using System.Reflection;
@using System.ComponentModel.DataAnnotations;
@inject IHttpClientFactory httpClientFactory
@inject NavigationManager nav
@inject IToastService toastService

<div class="container">
  <div class="row">
    <div class="col">
      <h2>Locomotives</h2>
    </div>
  </div>

  <div class="row">
    <div class="col col-12">
      <div class="input-group">
        <input class="form-control" type="search" value="@SearchParameter" @onchange="Search" placeholder="Search" />
        <div class="input-group-append">
          <button class="btn btn-default" @onclick="() => Search(new ChangeEventArgs { Value = SearchParameter })">
            <span class="oi oi-magnifying-glass"></span>
          </button>
        </div>
      </div>
    </div>
  </div>

  <hr />

  <div class="row">
    <div class="col col-4 col-md-3 col-vertical-middle">
      Order by:
    </div>
    <div class="col col-8 col-md-3 col-vertical-middle">
      <select class="form-control form-control-sm" id="order_by" @onchange="ChangeOrderAsync">
        @foreach (int value in Enum.GetValues(typeof(EOrderByOptions)))
        {
          string label = typeof(EOrderByOptions)
            .GetMember(typeof(EOrderByOptions).GetEnumName(value))
            .First()
            .GetCustomAttribute<DisplayAttribute>()
            .Name;
          @if (value == (int)OrderByOptions)
          {
            <option value="@value" selected>@label</option>
          }
          else
          {
            <option value="@value">@label</option>
          }
        }
      </select>
    </div>
  </div>

  <hr />
  @{ int itemsPerRow = 3; }
  @for (int i = 0; i < (Locomotives.Count / itemsPerRow) + 1; i++)
  {
    <div class="row">
      @for (int j = (i * itemsPerRow); j < (i * itemsPerRow) + itemsPerRow; j++)
      {
        if (j >= Locomotives.Count)
        {
          break;
        }
        <div class="col col-@(12 / itemsPerRow)">
          <Blazor.Components.ListLocomotiveCard Locomotive="Locomotives[j]"></Blazor.Components.ListLocomotiveCard>
        </div>
      }
    </div>
  }
</div>

@code {
    private readonly string _SEARCH = "s";
    private readonly string _ORDER = "o";
    private readonly string _PAGE_NUMBER = "pgn";
    private readonly string _PAGE_SIZE = "pgs";

    public List<ListLocomotiveDto> Locomotives { get; set; } = new();

    private HttpClient Client { get; set; }

    private string SearchParameter { get; set; }
    private EOrderByOptions OrderByOptions { get; set; } = EOrderByOptions.Default;

    protected override async Task OnInitializedAsync()
    {
      Client = httpClientFactory.CreateClient(Globals.LOCAL_API);

      // Parse/validate query string
      string query = nav.ToAbsoluteUri(nav.Uri).Query;
      string newUri = null;
      if (QueryHelpers.ParseQuery(query).TryGetValue(_SEARCH, out var search))
      {
        SearchParameter = search;
      }
      if (QueryHelpers.ParseQuery(query).TryGetValue(_ORDER, out var order))
      {
        if (EOrderByOptions.TryParse(order, out EOrderByOptions orderResult) && EOrderByOptions.IsDefined(orderResult))
        {
          OrderByOptions = orderResult;
        }
        else
        {
          newUri = GetUriWithUpdatedQueryString(_ORDER, null);
        }
      }
      if (!String.IsNullOrEmpty(newUri))
      {
        nav.NavigateTo(newUri);
      }

      await GetLocomotivesAsync();
    }

    private async Task GetLocomotivesAsync()
    {
      try
      {
        Locomotives = await Client.GetFromJsonAsync<List<ListLocomotiveDto>>($"locomotive/list{new Uri(nav.Uri).Query}");
      }
      catch (Exception e)
      {
        toastService.ShowError(Globals.UNABLE_TO_FETCH_PRODUCTS + e.Message, Globals.SYSTEM_ERROR);
      }
    }

    private async Task Search(ChangeEventArgs eventArgs)
    {
      SearchParameter = (string)eventArgs.Value;
      nav.NavigateTo(GetUriWithUpdatedQueryString(_SEARCH, SearchParameter));
      await OnInitializedAsync();
    }

    private async Task ChangeOrderAsync(ChangeEventArgs eventArgs)
    {
      if (EOrderByOptions.TryParse(eventArgs.Value.ToString(), out EOrderByOptions result))
      {
        OrderByOptions = result;
      }
      else
      {
        OrderByOptions = EOrderByOptions.Default;
      }
      nav.NavigateTo(GetUriWithUpdatedQueryString(_ORDER, ((int)OrderByOptions).ToString()));
      await OnInitializedAsync();
    }

    private string GetUriWithUpdatedQueryString(string key, string value)
    {
      Uri uri = new(nav.Uri);
      string pagePath = uri.GetLeftPart(UriPartial.Path);
      NameValueCollection newQueryString = HttpUtility.ParseQueryString(uri.Query);

      newQueryString.Remove(key);

      if (!String.IsNullOrWhiteSpace(value))
      {
        newQueryString.Add(key, value);
      }

      return newQueryString.Count > 0 ? $"{pagePath}?{newQueryString}" : pagePath;
    }
}